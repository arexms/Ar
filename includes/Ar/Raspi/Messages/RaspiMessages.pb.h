// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaspiMessages.proto

#ifndef PROTOBUF_RaspiMessages_2eproto__INCLUDED
#define PROTOBUF_RaspiMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Ar {
namespace Raspi {
namespace Messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RaspiMessages_2eproto();
void protobuf_AssignDesc_RaspiMessages_2eproto();
void protobuf_ShutdownFile_RaspiMessages_2eproto();

class AliveMessage;
class ArRaspiMessageEnvelope;
class ArRaspiMessageEnvelope_Body;
class ArRaspiMessageEnvelope_Header;
class NewNodeMessage;
class NodeStatus;

// ===================================================================

class ArRaspiMessageEnvelope_Header : public ::google::protobuf::Message {
 public:
  ArRaspiMessageEnvelope_Header();
  virtual ~ArRaspiMessageEnvelope_Header();

  ArRaspiMessageEnvelope_Header(const ArRaspiMessageEnvelope_Header& from);

  inline ArRaspiMessageEnvelope_Header& operator=(const ArRaspiMessageEnvelope_Header& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArRaspiMessageEnvelope_Header& default_instance();

  void Swap(ArRaspiMessageEnvelope_Header* other);

  // implements Message ----------------------------------------------

  inline ArRaspiMessageEnvelope_Header* New() const { return New(NULL); }

  ArRaspiMessageEnvelope_Header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArRaspiMessageEnvelope_Header& from);
  void MergeFrom(const ArRaspiMessageEnvelope_Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArRaspiMessageEnvelope_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string interfaceVersion = 1;
  void clear_interfaceversion();
  static const int kInterfaceVersionFieldNumber = 1;
  const ::std::string& interfaceversion() const;
  void set_interfaceversion(const ::std::string& value);
  void set_interfaceversion(const char* value);
  void set_interfaceversion(const char* value, size_t size);
  ::std::string* mutable_interfaceversion();
  ::std::string* release_interfaceversion();
  void set_allocated_interfaceversion(::std::string* interfaceversion);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional string timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr interfaceversion_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RaspiMessages_2eproto();
  friend void protobuf_AssignDesc_RaspiMessages_2eproto();
  friend void protobuf_ShutdownFile_RaspiMessages_2eproto();

  void InitAsDefaultInstance();
  static ArRaspiMessageEnvelope_Header* default_instance_;
};
// -------------------------------------------------------------------

class ArRaspiMessageEnvelope_Body : public ::google::protobuf::Message {
 public:
  ArRaspiMessageEnvelope_Body();
  virtual ~ArRaspiMessageEnvelope_Body();

  ArRaspiMessageEnvelope_Body(const ArRaspiMessageEnvelope_Body& from);

  inline ArRaspiMessageEnvelope_Body& operator=(const ArRaspiMessageEnvelope_Body& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArRaspiMessageEnvelope_Body& default_instance();

  void Swap(ArRaspiMessageEnvelope_Body* other);

  // implements Message ----------------------------------------------

  inline ArRaspiMessageEnvelope_Body* New() const { return New(NULL); }

  ArRaspiMessageEnvelope_Body* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArRaspiMessageEnvelope_Body& from);
  void MergeFrom(const ArRaspiMessageEnvelope_Body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArRaspiMessageEnvelope_Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RaspiMessages_2eproto();
  friend void protobuf_AssignDesc_RaspiMessages_2eproto();
  friend void protobuf_ShutdownFile_RaspiMessages_2eproto();

  void InitAsDefaultInstance();
  static ArRaspiMessageEnvelope_Body* default_instance_;
};
// -------------------------------------------------------------------

class ArRaspiMessageEnvelope : public ::google::protobuf::Message {
 public:
  ArRaspiMessageEnvelope();
  virtual ~ArRaspiMessageEnvelope();

  ArRaspiMessageEnvelope(const ArRaspiMessageEnvelope& from);

  inline ArRaspiMessageEnvelope& operator=(const ArRaspiMessageEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArRaspiMessageEnvelope& default_instance();

  void Swap(ArRaspiMessageEnvelope* other);

  // implements Message ----------------------------------------------

  inline ArRaspiMessageEnvelope* New() const { return New(NULL); }

  ArRaspiMessageEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArRaspiMessageEnvelope& from);
  void MergeFrom(const ArRaspiMessageEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArRaspiMessageEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ArRaspiMessageEnvelope_Header Header;
  typedef ArRaspiMessageEnvelope_Body Body;

  // accessors -------------------------------------------------------

  // optional .Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header& header() const;
  ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header* mutable_header();
  ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header* release_header();
  void set_allocated_header(::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header* header);

  // optional .Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body& body() const;
  ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body* mutable_body();
  ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body* release_body();
  void set_allocated_body(::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body* body);

  // @@protoc_insertion_point(class_scope:Ar.Raspi.Messages.ArRaspiMessageEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header* header_;
  ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body* body_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RaspiMessages_2eproto();
  friend void protobuf_AssignDesc_RaspiMessages_2eproto();
  friend void protobuf_ShutdownFile_RaspiMessages_2eproto();

  void InitAsDefaultInstance();
  static ArRaspiMessageEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class NewNodeMessage : public ::google::protobuf::Message {
 public:
  NewNodeMessage();
  virtual ~NewNodeMessage();

  NewNodeMessage(const NewNodeMessage& from);

  inline NewNodeMessage& operator=(const NewNodeMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewNodeMessage& default_instance();

  void Swap(NewNodeMessage* other);

  // implements Message ----------------------------------------------

  inline NewNodeMessage* New() const { return New(NULL); }

  NewNodeMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewNodeMessage& from);
  void MergeFrom(const NewNodeMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewNodeMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Ar.Raspi.Messages.NewNodeMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RaspiMessages_2eproto();
  friend void protobuf_AssignDesc_RaspiMessages_2eproto();
  friend void protobuf_ShutdownFile_RaspiMessages_2eproto();

  void InitAsDefaultInstance();
  static NewNodeMessage* default_instance_;
};
// -------------------------------------------------------------------

class AliveMessage : public ::google::protobuf::Message {
 public:
  AliveMessage();
  virtual ~AliveMessage();

  AliveMessage(const AliveMessage& from);

  inline AliveMessage& operator=(const AliveMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AliveMessage& default_instance();

  void Swap(AliveMessage* other);

  // implements Message ----------------------------------------------

  inline AliveMessage* New() const { return New(NULL); }

  AliveMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AliveMessage& from);
  void MergeFrom(const AliveMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AliveMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // optional string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:Ar.Raspi.Messages.AliveMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RaspiMessages_2eproto();
  friend void protobuf_AssignDesc_RaspiMessages_2eproto();
  friend void protobuf_ShutdownFile_RaspiMessages_2eproto();

  void InitAsDefaultInstance();
  static AliveMessage* default_instance_;
};
// -------------------------------------------------------------------

class NodeStatus : public ::google::protobuf::Message {
 public:
  NodeStatus();
  virtual ~NodeStatus();

  NodeStatus(const NodeStatus& from);

  inline NodeStatus& operator=(const NodeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeStatus& default_instance();

  void Swap(NodeStatus* other);

  // implements Message ----------------------------------------------

  inline NodeStatus* New() const { return New(NULL); }

  NodeStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeStatus& from);
  void MergeFrom(const NodeStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:Ar.Raspi.Messages.NodeStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RaspiMessages_2eproto();
  friend void protobuf_AssignDesc_RaspiMessages_2eproto();
  friend void protobuf_ShutdownFile_RaspiMessages_2eproto();

  void InitAsDefaultInstance();
  static NodeStatus* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ArRaspiMessageEnvelope_Header

// optional string interfaceVersion = 1;
inline void ArRaspiMessageEnvelope_Header::clear_interfaceversion() {
  interfaceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArRaspiMessageEnvelope_Header::interfaceversion() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
  return interfaceversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Header::set_interfaceversion(const ::std::string& value) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
}
inline void ArRaspiMessageEnvelope_Header::set_interfaceversion(const char* value) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
}
inline void ArRaspiMessageEnvelope_Header::set_interfaceversion(const char* value, size_t size) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
}
inline ::std::string* ArRaspiMessageEnvelope_Header::mutable_interfaceversion() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
  return interfaceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArRaspiMessageEnvelope_Header::release_interfaceversion() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
  
  return interfaceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Header::set_allocated_interfaceversion(::std::string* interfaceversion) {
  if (interfaceversion != NULL) {
    
  } else {
    
  }
  interfaceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfaceversion);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
}

// optional int32 id = 2;
inline void ArRaspiMessageEnvelope_Header::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ArRaspiMessageEnvelope_Header::id() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.id)
  return id_;
}
inline void ArRaspiMessageEnvelope_Header::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.id)
}

// optional string from = 3;
inline void ArRaspiMessageEnvelope_Header::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArRaspiMessageEnvelope_Header::from() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Header::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.from)
}
inline void ArRaspiMessageEnvelope_Header::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.from)
}
inline void ArRaspiMessageEnvelope_Header::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.from)
}
inline ::std::string* ArRaspiMessageEnvelope_Header::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArRaspiMessageEnvelope_Header::release_from() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Header::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.from)
}

// optional string to = 4;
inline void ArRaspiMessageEnvelope_Header::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArRaspiMessageEnvelope_Header::to() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Header::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.to)
}
inline void ArRaspiMessageEnvelope_Header::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.to)
}
inline void ArRaspiMessageEnvelope_Header::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.to)
}
inline ::std::string* ArRaspiMessageEnvelope_Header::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArRaspiMessageEnvelope_Header::release_to() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Header::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.to)
}

// optional string timestamp = 5;
inline void ArRaspiMessageEnvelope_Header::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArRaspiMessageEnvelope_Header::timestamp() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Header::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.timestamp)
}
inline void ArRaspiMessageEnvelope_Header::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.timestamp)
}
inline void ArRaspiMessageEnvelope_Header::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.timestamp)
}
inline ::std::string* ArRaspiMessageEnvelope_Header::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArRaspiMessageEnvelope_Header::release_timestamp() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Header::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header.timestamp)
}

// -------------------------------------------------------------------

// ArRaspiMessageEnvelope_Body

// optional int32 type = 1;
inline void ArRaspiMessageEnvelope_Body::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ArRaspiMessageEnvelope_Body::type() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.type)
  return type_;
}
inline void ArRaspiMessageEnvelope_Body::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.type)
}

// optional bytes data = 2;
inline void ArRaspiMessageEnvelope_Body::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArRaspiMessageEnvelope_Body::data() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Body::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.data)
}
inline void ArRaspiMessageEnvelope_Body::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.data)
}
inline void ArRaspiMessageEnvelope_Body::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.data)
}
inline ::std::string* ArRaspiMessageEnvelope_Body::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArRaspiMessageEnvelope_Body::release_data() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArRaspiMessageEnvelope_Body::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body.data)
}

// -------------------------------------------------------------------

// ArRaspiMessageEnvelope

// optional .Ar.Raspi.Messages.ArRaspiMessageEnvelope.Header header = 1;
inline bool ArRaspiMessageEnvelope::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void ArRaspiMessageEnvelope::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header& ArRaspiMessageEnvelope::header() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header* ArRaspiMessageEnvelope::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header;
  }
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.ArRaspiMessageEnvelope.header)
  return header_;
}
inline ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header* ArRaspiMessageEnvelope::release_header() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.ArRaspiMessageEnvelope.header)
  
  ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ArRaspiMessageEnvelope::set_allocated_header(::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.ArRaspiMessageEnvelope.header)
}

// optional .Ar.Raspi.Messages.ArRaspiMessageEnvelope.Body body = 2;
inline bool ArRaspiMessageEnvelope::has_body() const {
  return !_is_default_instance_ && body_ != NULL;
}
inline void ArRaspiMessageEnvelope::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}
inline const ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body& ArRaspiMessageEnvelope::body() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.ArRaspiMessageEnvelope.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body* ArRaspiMessageEnvelope::mutable_body() {
  
  if (body_ == NULL) {
    body_ = new ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body;
  }
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.ArRaspiMessageEnvelope.body)
  return body_;
}
inline ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body* ArRaspiMessageEnvelope::release_body() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.ArRaspiMessageEnvelope.body)
  
  ::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline void ArRaspiMessageEnvelope::set_allocated_body(::Ar::Raspi::Messages::ArRaspiMessageEnvelope_Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.ArRaspiMessageEnvelope.body)
}

// -------------------------------------------------------------------

// NewNodeMessage

// optional string name = 1;
inline void NewNodeMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewNodeMessage::name() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NewNodeMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewNodeMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NewNodeMessage.name)
}
inline void NewNodeMessage::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.NewNodeMessage.name)
}
inline void NewNodeMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.NewNodeMessage.name)
}
inline ::std::string* NewNodeMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.NewNodeMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewNodeMessage::release_name() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.NewNodeMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewNodeMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.NewNodeMessage.name)
}

// optional string ip = 2;
inline void NewNodeMessage::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewNodeMessage::ip() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NewNodeMessage.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewNodeMessage::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NewNodeMessage.ip)
}
inline void NewNodeMessage::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.NewNodeMessage.ip)
}
inline void NewNodeMessage::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.NewNodeMessage.ip)
}
inline ::std::string* NewNodeMessage::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.NewNodeMessage.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewNodeMessage::release_ip() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.NewNodeMessage.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewNodeMessage::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.NewNodeMessage.ip)
}

// optional int32 port = 3;
inline void NewNodeMessage::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 NewNodeMessage::port() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NewNodeMessage.port)
  return port_;
}
inline void NewNodeMessage::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NewNodeMessage.port)
}

// -------------------------------------------------------------------

// AliveMessage

// optional string name = 1;
inline void AliveMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AliveMessage::name() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.AliveMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AliveMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.AliveMessage.name)
}
inline void AliveMessage::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.AliveMessage.name)
}
inline void AliveMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.AliveMessage.name)
}
inline ::std::string* AliveMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.AliveMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AliveMessage::release_name() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.AliveMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AliveMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.AliveMessage.name)
}

// optional string timestamp = 2;
inline void AliveMessage::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AliveMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.AliveMessage.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AliveMessage::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.AliveMessage.timestamp)
}
inline void AliveMessage::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.AliveMessage.timestamp)
}
inline void AliveMessage::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.AliveMessage.timestamp)
}
inline ::std::string* AliveMessage::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.AliveMessage.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AliveMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.AliveMessage.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AliveMessage::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.AliveMessage.timestamp)
}

// optional string status = 3;
inline void AliveMessage::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AliveMessage::status() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.AliveMessage.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AliveMessage::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.AliveMessage.status)
}
inline void AliveMessage::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.AliveMessage.status)
}
inline void AliveMessage::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.AliveMessage.status)
}
inline ::std::string* AliveMessage::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.AliveMessage.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AliveMessage::release_status() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.AliveMessage.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AliveMessage::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.AliveMessage.status)
}

// -------------------------------------------------------------------

// NodeStatus

// optional string status = 1;
inline void NodeStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeStatus::status() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NodeStatus.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeStatus::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NodeStatus.status)
}
inline void NodeStatus::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.NodeStatus.status)
}
inline void NodeStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.NodeStatus.status)
}
inline ::std::string* NodeStatus::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.NodeStatus.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeStatus::release_status() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.NodeStatus.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeStatus::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.NodeStatus.status)
}

// optional string description = 2;
inline void NodeStatus::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeStatus::description() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NodeStatus.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeStatus::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NodeStatus.description)
}
inline void NodeStatus::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.NodeStatus.description)
}
inline void NodeStatus::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.NodeStatus.description)
}
inline ::std::string* NodeStatus::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.NodeStatus.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeStatus::release_description() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.NodeStatus.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeStatus::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.NodeStatus.description)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace Raspi
}  // namespace Ar

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RaspiMessages_2eproto__INCLUDED
