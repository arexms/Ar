// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaspiMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <Ar/RasPi/Messages/RaspiMessages.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Ar {
namespace RasPi {
namespace Messages {

namespace {

const ::google::protobuf::Descriptor* ArRaspiMessageEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArRaspiMessageEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArRaspiMessageEnvelope_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArRaspiMessageEnvelope_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArRaspiMessageEnvelope_Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArRaspiMessageEnvelope_Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewNodeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewNodeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AliveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AliveMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RaspiMessages_2eproto() {
  protobuf_AddDesc_RaspiMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RaspiMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ArRaspiMessageEnvelope_descriptor_ = file->message_type(0);
  static const int ArRaspiMessageEnvelope_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope, body_),
  };
  ArRaspiMessageEnvelope_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArRaspiMessageEnvelope_descriptor_,
      ArRaspiMessageEnvelope::default_instance_,
      ArRaspiMessageEnvelope_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArRaspiMessageEnvelope),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope, _is_default_instance_));
  ArRaspiMessageEnvelope_Header_descriptor_ = ArRaspiMessageEnvelope_descriptor_->nested_type(0);
  static const int ArRaspiMessageEnvelope_Header_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Header, interfaceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Header, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Header, from_),
  };
  ArRaspiMessageEnvelope_Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArRaspiMessageEnvelope_Header_descriptor_,
      ArRaspiMessageEnvelope_Header::default_instance_,
      ArRaspiMessageEnvelope_Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArRaspiMessageEnvelope_Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Header, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Header, _is_default_instance_));
  ArRaspiMessageEnvelope_Body_descriptor_ = ArRaspiMessageEnvelope_descriptor_->nested_type(1);
  static const int ArRaspiMessageEnvelope_Body_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Body, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Body, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Body, data_),
  };
  ArRaspiMessageEnvelope_Body_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArRaspiMessageEnvelope_Body_descriptor_,
      ArRaspiMessageEnvelope_Body::default_instance_,
      ArRaspiMessageEnvelope_Body_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArRaspiMessageEnvelope_Body),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Body, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArRaspiMessageEnvelope_Body, _is_default_instance_));
  NewNodeMessage_descriptor_ = file->message_type(1);
  static const int NewNodeMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, port_),
  };
  NewNodeMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewNodeMessage_descriptor_,
      NewNodeMessage::default_instance_,
      NewNodeMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewNodeMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, _is_default_instance_));
  AliveMessage_descriptor_ = file->message_type(2);
  static const int AliveMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, status_),
  };
  AliveMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AliveMessage_descriptor_,
      AliveMessage::default_instance_,
      AliveMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(AliveMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RaspiMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArRaspiMessageEnvelope_descriptor_, &ArRaspiMessageEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArRaspiMessageEnvelope_Header_descriptor_, &ArRaspiMessageEnvelope_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArRaspiMessageEnvelope_Body_descriptor_, &ArRaspiMessageEnvelope_Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewNodeMessage_descriptor_, &NewNodeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AliveMessage_descriptor_, &AliveMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RaspiMessages_2eproto() {
  delete ArRaspiMessageEnvelope::default_instance_;
  delete ArRaspiMessageEnvelope_reflection_;
  delete ArRaspiMessageEnvelope_Header::default_instance_;
  delete ArRaspiMessageEnvelope_Header_reflection_;
  delete ArRaspiMessageEnvelope_Body::default_instance_;
  delete ArRaspiMessageEnvelope_Body_reflection_;
  delete NewNodeMessage::default_instance_;
  delete NewNodeMessage_reflection_;
  delete AliveMessage::default_instance_;
  delete AliveMessage_reflection_;
}

void protobuf_AddDesc_RaspiMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023RaspiMessages.proto\022\021Ar.RasPi.Messages"
    "\"\213\002\n\026ArRaspiMessageEnvelope\022@\n\006header\030\001 "
    "\001(\01320.Ar.RasPi.Messages.ArRaspiMessageEn"
    "velope.Header\022<\n\004body\030\002 \001(\0132..Ar.RasPi.M"
    "essages.ArRaspiMessageEnvelope.Body\032<\n\006H"
    "eader\022\030\n\020interfaceVersion\030\001 \001(\t\022\n\n\002id\030\002 "
    "\001(\005\022\014\n\004from\030\003 \001(\t\0323\n\004Body\022\017\n\007version\030\001 \001"
    "(\t\022\014\n\004type\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\"8\n\016NewNod"
    "eMessage\022\014\n\004name\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004po"
    "rt\030\003 \001(\005\"\?\n\014AliveMessage\022\014\n\004name\030\001 \001(\t\022\021"
    "\n\ttimestamp\030\002 \001(\t\022\016\n\006status\030\003 \001(\tb\006proto"
    "3", 441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RaspiMessages.proto", &protobuf_RegisterTypes);
  ArRaspiMessageEnvelope::default_instance_ = new ArRaspiMessageEnvelope();
  ArRaspiMessageEnvelope_Header::default_instance_ = new ArRaspiMessageEnvelope_Header();
  ArRaspiMessageEnvelope_Body::default_instance_ = new ArRaspiMessageEnvelope_Body();
  NewNodeMessage::default_instance_ = new NewNodeMessage();
  AliveMessage::default_instance_ = new AliveMessage();
  ArRaspiMessageEnvelope::default_instance_->InitAsDefaultInstance();
  ArRaspiMessageEnvelope_Header::default_instance_->InitAsDefaultInstance();
  ArRaspiMessageEnvelope_Body::default_instance_->InitAsDefaultInstance();
  NewNodeMessage::default_instance_->InitAsDefaultInstance();
  AliveMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RaspiMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RaspiMessages_2eproto {
  StaticDescriptorInitializer_RaspiMessages_2eproto() {
    protobuf_AddDesc_RaspiMessages_2eproto();
  }
} static_descriptor_initializer_RaspiMessages_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArRaspiMessageEnvelope_Header::kInterfaceVersionFieldNumber;
const int ArRaspiMessageEnvelope_Header::kIdFieldNumber;
const int ArRaspiMessageEnvelope_Header::kFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArRaspiMessageEnvelope_Header::ArRaspiMessageEnvelope_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
}

void ArRaspiMessageEnvelope_Header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ArRaspiMessageEnvelope_Header::ArRaspiMessageEnvelope_Header(const ArRaspiMessageEnvelope_Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
}

void ArRaspiMessageEnvelope_Header::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interfaceversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ArRaspiMessageEnvelope_Header::~ArRaspiMessageEnvelope_Header() {
  // @@protoc_insertion_point(destructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  SharedDtor();
}

void ArRaspiMessageEnvelope_Header::SharedDtor() {
  interfaceversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ArRaspiMessageEnvelope_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArRaspiMessageEnvelope_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArRaspiMessageEnvelope_Header_descriptor_;
}

const ArRaspiMessageEnvelope_Header& ArRaspiMessageEnvelope_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

ArRaspiMessageEnvelope_Header* ArRaspiMessageEnvelope_Header::default_instance_ = NULL;

ArRaspiMessageEnvelope_Header* ArRaspiMessageEnvelope_Header::New(::google::protobuf::Arena* arena) const {
  ArRaspiMessageEnvelope_Header* n = new ArRaspiMessageEnvelope_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArRaspiMessageEnvelope_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  interfaceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ArRaspiMessageEnvelope_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string interfaceVersion = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interfaceversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interfaceversion().data(), this->interfaceversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }

      // optional string from = 3;
      case 3: {
        if (tag == 26) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  return false;
#undef DO_
}

void ArRaspiMessageEnvelope_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  // optional string interfaceVersion = 1;
  if (this->interfaceversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfaceversion().data(), this->interfaceversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interfaceversion(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
}

::google::protobuf::uint8* ArRaspiMessageEnvelope_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  // optional string interfaceVersion = 1;
  if (this->interfaceversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfaceversion().data(), this->interfaceversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interfaceversion(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  return target;
}

int ArRaspiMessageEnvelope_Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  int total_size = 0;

  // optional string interfaceVersion = 1;
  if (this->interfaceversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interfaceversion());
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArRaspiMessageEnvelope_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArRaspiMessageEnvelope_Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArRaspiMessageEnvelope_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
    MergeFrom(*source);
  }
}

void ArRaspiMessageEnvelope_Header::MergeFrom(const ArRaspiMessageEnvelope_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.interfaceversion().size() > 0) {

    interfaceversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interfaceversion_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
}

void ArRaspiMessageEnvelope_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArRaspiMessageEnvelope_Header::CopyFrom(const ArRaspiMessageEnvelope_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArRaspiMessageEnvelope_Header::IsInitialized() const {

  return true;
}

void ArRaspiMessageEnvelope_Header::Swap(ArRaspiMessageEnvelope_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArRaspiMessageEnvelope_Header::InternalSwap(ArRaspiMessageEnvelope_Header* other) {
  interfaceversion_.Swap(&other->interfaceversion_);
  std::swap(id_, other->id_);
  from_.Swap(&other->from_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArRaspiMessageEnvelope_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArRaspiMessageEnvelope_Header_descriptor_;
  metadata.reflection = ArRaspiMessageEnvelope_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArRaspiMessageEnvelope_Body::kVersionFieldNumber;
const int ArRaspiMessageEnvelope_Body::kTypeFieldNumber;
const int ArRaspiMessageEnvelope_Body::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArRaspiMessageEnvelope_Body::ArRaspiMessageEnvelope_Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
}

void ArRaspiMessageEnvelope_Body::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ArRaspiMessageEnvelope_Body::ArRaspiMessageEnvelope_Body(const ArRaspiMessageEnvelope_Body& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
}

void ArRaspiMessageEnvelope_Body::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ArRaspiMessageEnvelope_Body::~ArRaspiMessageEnvelope_Body() {
  // @@protoc_insertion_point(destructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  SharedDtor();
}

void ArRaspiMessageEnvelope_Body::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ArRaspiMessageEnvelope_Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArRaspiMessageEnvelope_Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArRaspiMessageEnvelope_Body_descriptor_;
}

const ArRaspiMessageEnvelope_Body& ArRaspiMessageEnvelope_Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

ArRaspiMessageEnvelope_Body* ArRaspiMessageEnvelope_Body::default_instance_ = NULL;

ArRaspiMessageEnvelope_Body* ArRaspiMessageEnvelope_Body::New(::google::protobuf::Arena* arena) const {
  ArRaspiMessageEnvelope_Body* n = new ArRaspiMessageEnvelope_Body;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArRaspiMessageEnvelope_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ArRaspiMessageEnvelope_Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  return false;
#undef DO_
}

void ArRaspiMessageEnvelope_Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
}

::google::protobuf::uint8* ArRaspiMessageEnvelope_Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  return target;
}

int ArRaspiMessageEnvelope_Body::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  int total_size = 0;

  // optional string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArRaspiMessageEnvelope_Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArRaspiMessageEnvelope_Body* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArRaspiMessageEnvelope_Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
    MergeFrom(*source);
  }
}

void ArRaspiMessageEnvelope_Body::MergeFrom(const ArRaspiMessageEnvelope_Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ArRaspiMessageEnvelope_Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArRaspiMessageEnvelope_Body::CopyFrom(const ArRaspiMessageEnvelope_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArRaspiMessageEnvelope_Body::IsInitialized() const {

  return true;
}

void ArRaspiMessageEnvelope_Body::Swap(ArRaspiMessageEnvelope_Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArRaspiMessageEnvelope_Body::InternalSwap(ArRaspiMessageEnvelope_Body* other) {
  version_.Swap(&other->version_);
  std::swap(type_, other->type_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArRaspiMessageEnvelope_Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArRaspiMessageEnvelope_Body_descriptor_;
  metadata.reflection = ArRaspiMessageEnvelope_Body_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArRaspiMessageEnvelope::kHeaderFieldNumber;
const int ArRaspiMessageEnvelope::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArRaspiMessageEnvelope::ArRaspiMessageEnvelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
}

void ArRaspiMessageEnvelope::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header*>(&::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header::default_instance());
  body_ = const_cast< ::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body*>(&::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body::default_instance());
}

ArRaspiMessageEnvelope::ArRaspiMessageEnvelope(const ArRaspiMessageEnvelope& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
}

void ArRaspiMessageEnvelope::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
}

ArRaspiMessageEnvelope::~ArRaspiMessageEnvelope() {
  // @@protoc_insertion_point(destructor:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  SharedDtor();
}

void ArRaspiMessageEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void ArRaspiMessageEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArRaspiMessageEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArRaspiMessageEnvelope_descriptor_;
}

const ArRaspiMessageEnvelope& ArRaspiMessageEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

ArRaspiMessageEnvelope* ArRaspiMessageEnvelope::default_instance_ = NULL;

ArRaspiMessageEnvelope* ArRaspiMessageEnvelope::New(::google::protobuf::Arena* arena) const {
  ArRaspiMessageEnvelope* n = new ArRaspiMessageEnvelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArRaspiMessageEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}

bool ArRaspiMessageEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  return false;
#undef DO_
}

void ArRaspiMessageEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  // optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body body = 2;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->body_, output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
}

::google::protobuf::uint8* ArRaspiMessageEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  // optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body body = 2;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->body_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  return target;
}

int ArRaspiMessageEnvelope::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  int total_size = 0;

  // optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArRaspiMessageEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArRaspiMessageEnvelope* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArRaspiMessageEnvelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
    MergeFrom(*source);
  }
}

void ArRaspiMessageEnvelope::MergeFrom(const ArRaspiMessageEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header::MergeFrom(from.header());
  }
  if (from.has_body()) {
    mutable_body()->::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body::MergeFrom(from.body());
  }
}

void ArRaspiMessageEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArRaspiMessageEnvelope::CopyFrom(const ArRaspiMessageEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.RasPi.Messages.ArRaspiMessageEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArRaspiMessageEnvelope::IsInitialized() const {

  return true;
}

void ArRaspiMessageEnvelope::Swap(ArRaspiMessageEnvelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArRaspiMessageEnvelope::InternalSwap(ArRaspiMessageEnvelope* other) {
  std::swap(header_, other->header_);
  std::swap(body_, other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArRaspiMessageEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArRaspiMessageEnvelope_descriptor_;
  metadata.reflection = ArRaspiMessageEnvelope_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArRaspiMessageEnvelope_Header

// optional string interfaceVersion = 1;
void ArRaspiMessageEnvelope_Header::clear_interfaceversion() {
  interfaceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ArRaspiMessageEnvelope_Header::interfaceversion() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
  return interfaceversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArRaspiMessageEnvelope_Header::set_interfaceversion(const ::std::string& value) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
}
 void ArRaspiMessageEnvelope_Header::set_interfaceversion(const char* value) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
}
 void ArRaspiMessageEnvelope_Header::set_interfaceversion(const char* value, size_t size) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
}
 ::std::string* ArRaspiMessageEnvelope_Header::mutable_interfaceversion() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
  return interfaceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ArRaspiMessageEnvelope_Header::release_interfaceversion() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
  
  return interfaceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArRaspiMessageEnvelope_Header::set_allocated_interfaceversion(::std::string* interfaceversion) {
  if (interfaceversion != NULL) {
    
  } else {
    
  }
  interfaceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfaceversion);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.interfaceVersion)
}

// optional int32 id = 2;
void ArRaspiMessageEnvelope_Header::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 ArRaspiMessageEnvelope_Header::id() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.id)
  return id_;
}
 void ArRaspiMessageEnvelope_Header::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.id)
}

// optional string from = 3;
void ArRaspiMessageEnvelope_Header::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ArRaspiMessageEnvelope_Header::from() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArRaspiMessageEnvelope_Header::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from)
}
 void ArRaspiMessageEnvelope_Header::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from)
}
 void ArRaspiMessageEnvelope_Header::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from)
}
 ::std::string* ArRaspiMessageEnvelope_Header::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ArRaspiMessageEnvelope_Header::release_from() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArRaspiMessageEnvelope_Header::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header.from)
}

// -------------------------------------------------------------------

// ArRaspiMessageEnvelope_Body

// optional string version = 1;
void ArRaspiMessageEnvelope_Body::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ArRaspiMessageEnvelope_Body::version() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArRaspiMessageEnvelope_Body::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version)
}
 void ArRaspiMessageEnvelope_Body::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version)
}
 void ArRaspiMessageEnvelope_Body::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version)
}
 ::std::string* ArRaspiMessageEnvelope_Body::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ArRaspiMessageEnvelope_Body::release_version() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArRaspiMessageEnvelope_Body::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.version)
}

// optional int32 type = 2;
void ArRaspiMessageEnvelope_Body::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 ArRaspiMessageEnvelope_Body::type() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.type)
  return type_;
}
 void ArRaspiMessageEnvelope_Body::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.type)
}

// optional bytes data = 3;
void ArRaspiMessageEnvelope_Body::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ArRaspiMessageEnvelope_Body::data() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArRaspiMessageEnvelope_Body::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.data)
}
 void ArRaspiMessageEnvelope_Body::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.data)
}
 void ArRaspiMessageEnvelope_Body::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.data)
}
 ::std::string* ArRaspiMessageEnvelope_Body::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ArRaspiMessageEnvelope_Body::release_data() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArRaspiMessageEnvelope_Body::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body.data)
}

// -------------------------------------------------------------------

// ArRaspiMessageEnvelope

// optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Header header = 1;
bool ArRaspiMessageEnvelope::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void ArRaspiMessageEnvelope::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header& ArRaspiMessageEnvelope::header() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.ArRaspiMessageEnvelope.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header* ArRaspiMessageEnvelope::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header;
  }
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.ArRaspiMessageEnvelope.header)
  return header_;
}
::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header* ArRaspiMessageEnvelope::release_header() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.ArRaspiMessageEnvelope.header)
  
  ::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ArRaspiMessageEnvelope::set_allocated_header(::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.ArRaspiMessageEnvelope.header)
}

// optional .Ar.RasPi.Messages.ArRaspiMessageEnvelope.Body body = 2;
bool ArRaspiMessageEnvelope::has_body() const {
  return !_is_default_instance_ && body_ != NULL;
}
void ArRaspiMessageEnvelope::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}
const ::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body& ArRaspiMessageEnvelope::body() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.ArRaspiMessageEnvelope.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body* ArRaspiMessageEnvelope::mutable_body() {
  
  if (body_ == NULL) {
    body_ = new ::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body;
  }
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.ArRaspiMessageEnvelope.body)
  return body_;
}
::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body* ArRaspiMessageEnvelope::release_body() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.ArRaspiMessageEnvelope.body)
  
  ::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body* temp = body_;
  body_ = NULL;
  return temp;
}
void ArRaspiMessageEnvelope::set_allocated_body(::Ar::RasPi::Messages::ArRaspiMessageEnvelope_Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.ArRaspiMessageEnvelope.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewNodeMessage::kNameFieldNumber;
const int NewNodeMessage::kIpFieldNumber;
const int NewNodeMessage::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewNodeMessage::NewNodeMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.RasPi.Messages.NewNodeMessage)
}

void NewNodeMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewNodeMessage::NewNodeMessage(const NewNodeMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.RasPi.Messages.NewNodeMessage)
}

void NewNodeMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

NewNodeMessage::~NewNodeMessage() {
  // @@protoc_insertion_point(destructor:Ar.RasPi.Messages.NewNodeMessage)
  SharedDtor();
}

void NewNodeMessage::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NewNodeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewNodeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewNodeMessage_descriptor_;
}

const NewNodeMessage& NewNodeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

NewNodeMessage* NewNodeMessage::default_instance_ = NULL;

NewNodeMessage* NewNodeMessage::New(::google::protobuf::Arena* arena) const {
  NewNodeMessage* n = new NewNodeMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewNodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.RasPi.Messages.NewNodeMessage)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool NewNodeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.RasPi.Messages.NewNodeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.RasPi.Messages.NewNodeMessage.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.RasPi.Messages.NewNodeMessage.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.RasPi.Messages.NewNodeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.RasPi.Messages.NewNodeMessage)
  return false;
#undef DO_
}

void NewNodeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.RasPi.Messages.NewNodeMessage)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.NewNodeMessage.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.NewNodeMessage.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.RasPi.Messages.NewNodeMessage)
}

::google::protobuf::uint8* NewNodeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.RasPi.Messages.NewNodeMessage)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.NewNodeMessage.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.NewNodeMessage.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.RasPi.Messages.NewNodeMessage)
  return target;
}

int NewNodeMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.RasPi.Messages.NewNodeMessage)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewNodeMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.RasPi.Messages.NewNodeMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NewNodeMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewNodeMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.RasPi.Messages.NewNodeMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.RasPi.Messages.NewNodeMessage)
    MergeFrom(*source);
  }
}

void NewNodeMessage::MergeFrom(const NewNodeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.RasPi.Messages.NewNodeMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void NewNodeMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.RasPi.Messages.NewNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewNodeMessage::CopyFrom(const NewNodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.RasPi.Messages.NewNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewNodeMessage::IsInitialized() const {

  return true;
}

void NewNodeMessage::Swap(NewNodeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewNodeMessage::InternalSwap(NewNodeMessage* other) {
  name_.Swap(&other->name_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewNodeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewNodeMessage_descriptor_;
  metadata.reflection = NewNodeMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewNodeMessage

// optional string name = 1;
void NewNodeMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NewNodeMessage::name() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.NewNodeMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewNodeMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.NewNodeMessage.name)
}
 void NewNodeMessage::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.NewNodeMessage.name)
}
 void NewNodeMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.NewNodeMessage.name)
}
 ::std::string* NewNodeMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.NewNodeMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewNodeMessage::release_name() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.NewNodeMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewNodeMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.NewNodeMessage.name)
}

// optional string ip = 2;
void NewNodeMessage::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NewNodeMessage::ip() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.NewNodeMessage.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewNodeMessage::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.NewNodeMessage.ip)
}
 void NewNodeMessage::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.NewNodeMessage.ip)
}
 void NewNodeMessage::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.NewNodeMessage.ip)
}
 ::std::string* NewNodeMessage::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.NewNodeMessage.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewNodeMessage::release_ip() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.NewNodeMessage.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewNodeMessage::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.NewNodeMessage.ip)
}

// optional int32 port = 3;
void NewNodeMessage::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 NewNodeMessage::port() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.NewNodeMessage.port)
  return port_;
}
 void NewNodeMessage::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.NewNodeMessage.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AliveMessage::kNameFieldNumber;
const int AliveMessage::kTimestampFieldNumber;
const int AliveMessage::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AliveMessage::AliveMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.RasPi.Messages.AliveMessage)
}

void AliveMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AliveMessage::AliveMessage(const AliveMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.RasPi.Messages.AliveMessage)
}

void AliveMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AliveMessage::~AliveMessage() {
  // @@protoc_insertion_point(destructor:Ar.RasPi.Messages.AliveMessage)
  SharedDtor();
}

void AliveMessage::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AliveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AliveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AliveMessage_descriptor_;
}

const AliveMessage& AliveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

AliveMessage* AliveMessage::default_instance_ = NULL;

AliveMessage* AliveMessage::New(::google::protobuf::Arena* arena) const {
  AliveMessage* n = new AliveMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AliveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.RasPi.Messages.AliveMessage)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AliveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.RasPi.Messages.AliveMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.RasPi.Messages.AliveMessage.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.RasPi.Messages.AliveMessage.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional string status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.RasPi.Messages.AliveMessage.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.RasPi.Messages.AliveMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.RasPi.Messages.AliveMessage)
  return false;
#undef DO_
}

void AliveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.RasPi.Messages.AliveMessage)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.AliveMessage.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string timestamp = 2;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.AliveMessage.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.AliveMessage.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.RasPi.Messages.AliveMessage)
}

::google::protobuf::uint8* AliveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.RasPi.Messages.AliveMessage)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.AliveMessage.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string timestamp = 2;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.AliveMessage.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.RasPi.Messages.AliveMessage.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.RasPi.Messages.AliveMessage)
  return target;
}

int AliveMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.RasPi.Messages.AliveMessage)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string timestamp = 2;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AliveMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.RasPi.Messages.AliveMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AliveMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AliveMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.RasPi.Messages.AliveMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.RasPi.Messages.AliveMessage)
    MergeFrom(*source);
  }
}

void AliveMessage::MergeFrom(const AliveMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.RasPi.Messages.AliveMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void AliveMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.RasPi.Messages.AliveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliveMessage::CopyFrom(const AliveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.RasPi.Messages.AliveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliveMessage::IsInitialized() const {

  return true;
}

void AliveMessage::Swap(AliveMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AliveMessage::InternalSwap(AliveMessage* other) {
  name_.Swap(&other->name_);
  timestamp_.Swap(&other->timestamp_);
  status_.Swap(&other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AliveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AliveMessage_descriptor_;
  metadata.reflection = AliveMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AliveMessage

// optional string name = 1;
void AliveMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AliveMessage::name() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.AliveMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.AliveMessage.name)
}
 void AliveMessage::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.AliveMessage.name)
}
 void AliveMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.AliveMessage.name)
}
 ::std::string* AliveMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.AliveMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AliveMessage::release_name() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.AliveMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.AliveMessage.name)
}

// optional string timestamp = 2;
void AliveMessage::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AliveMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.AliveMessage.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.AliveMessage.timestamp)
}
 void AliveMessage::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.AliveMessage.timestamp)
}
 void AliveMessage::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.AliveMessage.timestamp)
}
 ::std::string* AliveMessage::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.AliveMessage.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AliveMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.AliveMessage.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.AliveMessage.timestamp)
}

// optional string status = 3;
void AliveMessage::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AliveMessage::status() const {
  // @@protoc_insertion_point(field_get:Ar.RasPi.Messages.AliveMessage.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.RasPi.Messages.AliveMessage.status)
}
 void AliveMessage::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.RasPi.Messages.AliveMessage.status)
}
 void AliveMessage::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.RasPi.Messages.AliveMessage.status)
}
 ::std::string* AliveMessage::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Ar.RasPi.Messages.AliveMessage.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AliveMessage::release_status() {
  // @@protoc_insertion_point(field_release:Ar.RasPi.Messages.AliveMessage.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Ar.RasPi.Messages.AliveMessage.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace RasPi
}  // namespace Ar

// @@protoc_insertion_point(global_scope)
