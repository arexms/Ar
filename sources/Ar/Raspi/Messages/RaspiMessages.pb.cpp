/// @date Å›ro, 24 sie 2016, 22:03:44 CEST
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaspiMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <Ar/Raspi/Messages/RaspiMessages.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Ar {
namespace Raspi {
namespace Messages {

namespace {

const ::google::protobuf::Descriptor* RaspiMessageEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaspiMessageEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaspiMessageEnvelope_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaspiMessageEnvelope_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaspiMessageEnvelope_Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaspiMessageEnvelope_Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewNodeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewNodeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AliveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AliveMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reset_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RaspiMessages_2eproto() {
  protobuf_AddDesc_RaspiMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RaspiMessages.proto");
  GOOGLE_CHECK(file != NULL);
  RaspiMessageEnvelope_descriptor_ = file->message_type(0);
  static const int RaspiMessageEnvelope_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope, body_),
  };
  RaspiMessageEnvelope_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaspiMessageEnvelope_descriptor_,
      RaspiMessageEnvelope::default_instance_,
      RaspiMessageEnvelope_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaspiMessageEnvelope),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope, _is_default_instance_));
  RaspiMessageEnvelope_Header_descriptor_ = RaspiMessageEnvelope_descriptor_->nested_type(0);
  static const int RaspiMessageEnvelope_Header_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Header, interfaceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Header, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Header, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Header, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Header, timestamp_),
  };
  RaspiMessageEnvelope_Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaspiMessageEnvelope_Header_descriptor_,
      RaspiMessageEnvelope_Header::default_instance_,
      RaspiMessageEnvelope_Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaspiMessageEnvelope_Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Header, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Header, _is_default_instance_));
  RaspiMessageEnvelope_Body_descriptor_ = RaspiMessageEnvelope_descriptor_->nested_type(1);
  static const int RaspiMessageEnvelope_Body_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Body, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Body, data_),
  };
  RaspiMessageEnvelope_Body_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaspiMessageEnvelope_Body_descriptor_,
      RaspiMessageEnvelope_Body::default_instance_,
      RaspiMessageEnvelope_Body_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaspiMessageEnvelope_Body),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Body, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaspiMessageEnvelope_Body, _is_default_instance_));
  NewNodeMessage_descriptor_ = file->message_type(1);
  static const int NewNodeMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, port_),
  };
  NewNodeMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewNodeMessage_descriptor_,
      NewNodeMessage::default_instance_,
      NewNodeMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewNodeMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewNodeMessage, _is_default_instance_));
  AliveMessage_descriptor_ = file->message_type(2);
  static const int AliveMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, status_),
  };
  AliveMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AliveMessage_descriptor_,
      AliveMessage::default_instance_,
      AliveMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(AliveMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveMessage, _is_default_instance_));
  NodeStatus_descriptor_ = file->message_type(3);
  static const int NodeStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, description_),
  };
  NodeStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeStatus_descriptor_,
      NodeStatus::default_instance_,
      NodeStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, _is_default_instance_));
  Reset_descriptor_ = file->message_type(4);
  static const int Reset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reset, bywho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reset, reason_),
  };
  Reset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reset_descriptor_,
      Reset::default_instance_,
      Reset_offsets_,
      -1,
      -1,
      -1,
      sizeof(Reset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reset, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reset, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RaspiMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaspiMessageEnvelope_descriptor_, &RaspiMessageEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaspiMessageEnvelope_Header_descriptor_, &RaspiMessageEnvelope_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaspiMessageEnvelope_Body_descriptor_, &RaspiMessageEnvelope_Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewNodeMessage_descriptor_, &NewNodeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AliveMessage_descriptor_, &AliveMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeStatus_descriptor_, &NodeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reset_descriptor_, &Reset::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RaspiMessages_2eproto() {
  delete RaspiMessageEnvelope::default_instance_;
  delete RaspiMessageEnvelope_reflection_;
  delete RaspiMessageEnvelope_Header::default_instance_;
  delete RaspiMessageEnvelope_Header_reflection_;
  delete RaspiMessageEnvelope_Body::default_instance_;
  delete RaspiMessageEnvelope_Body_reflection_;
  delete NewNodeMessage::default_instance_;
  delete NewNodeMessage_reflection_;
  delete AliveMessage::default_instance_;
  delete AliveMessage_reflection_;
  delete NodeStatus::default_instance_;
  delete NodeStatus_reflection_;
  delete Reset::default_instance_;
  delete Reset_reflection_;
}

void protobuf_AddDesc_RaspiMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023RaspiMessages.proto\022\021Ar.Raspi.Messages"
    "\"\223\002\n\024RaspiMessageEnvelope\022>\n\006header\030\001 \001("
    "\0132..Ar.Raspi.Messages.RaspiMessageEnvelo"
    "pe.Header\022:\n\004body\030\002 \001(\0132,.Ar.Raspi.Messa"
    "ges.RaspiMessageEnvelope.Body\032[\n\006Header\022"
    "\030\n\020interfaceVersion\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\014\n"
    "\004from\030\003 \001(\t\022\n\n\002to\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001"
    "(\t\032\"\n\004Body\022\014\n\004type\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"8"
    "\n\016NewNodeMessage\022\014\n\004name\030\001 \001(\t\022\n\n\002ip\030\002 \001"
    "(\t\022\014\n\004port\030\003 \001(\005\"\?\n\014AliveMessage\022\014\n\004name"
    "\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\t\022\016\n\006status\030\003 \001("
    "\t\"1\n\nNodeStatus\022\016\n\006status\030\001 \001(\t\022\023\n\013descr"
    "iption\030\002 \001(\t\"&\n\005Reset\022\r\n\005byWho\030\001 \001(\t\022\016\n\006"
    "reason\030\002 \001(\tb\006proto3", 540);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RaspiMessages.proto", &protobuf_RegisterTypes);
  RaspiMessageEnvelope::default_instance_ = new RaspiMessageEnvelope();
  RaspiMessageEnvelope_Header::default_instance_ = new RaspiMessageEnvelope_Header();
  RaspiMessageEnvelope_Body::default_instance_ = new RaspiMessageEnvelope_Body();
  NewNodeMessage::default_instance_ = new NewNodeMessage();
  AliveMessage::default_instance_ = new AliveMessage();
  NodeStatus::default_instance_ = new NodeStatus();
  Reset::default_instance_ = new Reset();
  RaspiMessageEnvelope::default_instance_->InitAsDefaultInstance();
  RaspiMessageEnvelope_Header::default_instance_->InitAsDefaultInstance();
  RaspiMessageEnvelope_Body::default_instance_->InitAsDefaultInstance();
  NewNodeMessage::default_instance_->InitAsDefaultInstance();
  AliveMessage::default_instance_->InitAsDefaultInstance();
  NodeStatus::default_instance_->InitAsDefaultInstance();
  Reset::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RaspiMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RaspiMessages_2eproto {
  StaticDescriptorInitializer_RaspiMessages_2eproto() {
    protobuf_AddDesc_RaspiMessages_2eproto();
  }
} static_descriptor_initializer_RaspiMessages_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaspiMessageEnvelope_Header::kInterfaceVersionFieldNumber;
const int RaspiMessageEnvelope_Header::kIdFieldNumber;
const int RaspiMessageEnvelope_Header::kFromFieldNumber;
const int RaspiMessageEnvelope_Header::kToFieldNumber;
const int RaspiMessageEnvelope_Header::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaspiMessageEnvelope_Header::RaspiMessageEnvelope_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
}

void RaspiMessageEnvelope_Header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RaspiMessageEnvelope_Header::RaspiMessageEnvelope_Header(const RaspiMessageEnvelope_Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
}

void RaspiMessageEnvelope_Header::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interfaceversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RaspiMessageEnvelope_Header::~RaspiMessageEnvelope_Header() {
  // @@protoc_insertion_point(destructor:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  SharedDtor();
}

void RaspiMessageEnvelope_Header::SharedDtor() {
  interfaceversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RaspiMessageEnvelope_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaspiMessageEnvelope_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaspiMessageEnvelope_Header_descriptor_;
}

const RaspiMessageEnvelope_Header& RaspiMessageEnvelope_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

RaspiMessageEnvelope_Header* RaspiMessageEnvelope_Header::default_instance_ = NULL;

RaspiMessageEnvelope_Header* RaspiMessageEnvelope_Header::New(::google::protobuf::Arena* arena) const {
  RaspiMessageEnvelope_Header* n = new RaspiMessageEnvelope_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaspiMessageEnvelope_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  interfaceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RaspiMessageEnvelope_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string interfaceVersion = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interfaceversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interfaceversion().data(), this->interfaceversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }

      // optional string from = 3;
      case 3: {
        if (tag == 26) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to;
        break;
      }

      // optional string to = 4;
      case 4: {
        if (tag == 34) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 5;
      case 5: {
        if (tag == 42) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  return false;
#undef DO_
}

void RaspiMessageEnvelope_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  // optional string interfaceVersion = 1;
  if (this->interfaceversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfaceversion().data(), this->interfaceversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interfaceversion(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from(), output);
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to(), output);
  }

  // optional string timestamp = 5;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
}

::google::protobuf::uint8* RaspiMessageEnvelope_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  // optional string interfaceVersion = 1;
  if (this->interfaceversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfaceversion().data(), this->interfaceversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interfaceversion(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from(), target);
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to(), target);
  }

  // optional string timestamp = 5;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  return target;
}

int RaspiMessageEnvelope_Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  int total_size = 0;

  // optional string interfaceVersion = 1;
  if (this->interfaceversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interfaceversion());
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // optional string timestamp = 5;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaspiMessageEnvelope_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaspiMessageEnvelope_Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaspiMessageEnvelope_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
    MergeFrom(*source);
  }
}

void RaspiMessageEnvelope_Header::MergeFrom(const RaspiMessageEnvelope_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.interfaceversion().size() > 0) {

    interfaceversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interfaceversion_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
}

void RaspiMessageEnvelope_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaspiMessageEnvelope_Header::CopyFrom(const RaspiMessageEnvelope_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaspiMessageEnvelope_Header::IsInitialized() const {

  return true;
}

void RaspiMessageEnvelope_Header::Swap(RaspiMessageEnvelope_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaspiMessageEnvelope_Header::InternalSwap(RaspiMessageEnvelope_Header* other) {
  interfaceversion_.Swap(&other->interfaceversion_);
  std::swap(id_, other->id_);
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  timestamp_.Swap(&other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaspiMessageEnvelope_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaspiMessageEnvelope_Header_descriptor_;
  metadata.reflection = RaspiMessageEnvelope_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaspiMessageEnvelope_Body::kTypeFieldNumber;
const int RaspiMessageEnvelope_Body::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaspiMessageEnvelope_Body::RaspiMessageEnvelope_Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
}

void RaspiMessageEnvelope_Body::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RaspiMessageEnvelope_Body::RaspiMessageEnvelope_Body(const RaspiMessageEnvelope_Body& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
}

void RaspiMessageEnvelope_Body::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RaspiMessageEnvelope_Body::~RaspiMessageEnvelope_Body() {
  // @@protoc_insertion_point(destructor:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  SharedDtor();
}

void RaspiMessageEnvelope_Body::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RaspiMessageEnvelope_Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaspiMessageEnvelope_Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaspiMessageEnvelope_Body_descriptor_;
}

const RaspiMessageEnvelope_Body& RaspiMessageEnvelope_Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

RaspiMessageEnvelope_Body* RaspiMessageEnvelope_Body::default_instance_ = NULL;

RaspiMessageEnvelope_Body* RaspiMessageEnvelope_Body::New(::google::protobuf::Arena* arena) const {
  RaspiMessageEnvelope_Body* n = new RaspiMessageEnvelope_Body;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaspiMessageEnvelope_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  type_ = 0;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RaspiMessageEnvelope_Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  return false;
#undef DO_
}

void RaspiMessageEnvelope_Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
}

::google::protobuf::uint8* RaspiMessageEnvelope_Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  return target;
}

int RaspiMessageEnvelope_Body::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  int total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaspiMessageEnvelope_Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaspiMessageEnvelope_Body* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaspiMessageEnvelope_Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
    MergeFrom(*source);
  }
}

void RaspiMessageEnvelope_Body::MergeFrom(const RaspiMessageEnvelope_Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void RaspiMessageEnvelope_Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaspiMessageEnvelope_Body::CopyFrom(const RaspiMessageEnvelope_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaspiMessageEnvelope_Body::IsInitialized() const {

  return true;
}

void RaspiMessageEnvelope_Body::Swap(RaspiMessageEnvelope_Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaspiMessageEnvelope_Body::InternalSwap(RaspiMessageEnvelope_Body* other) {
  std::swap(type_, other->type_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaspiMessageEnvelope_Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaspiMessageEnvelope_Body_descriptor_;
  metadata.reflection = RaspiMessageEnvelope_Body_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaspiMessageEnvelope::kHeaderFieldNumber;
const int RaspiMessageEnvelope::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaspiMessageEnvelope::RaspiMessageEnvelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.Raspi.Messages.RaspiMessageEnvelope)
}

void RaspiMessageEnvelope::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::Ar::Raspi::Messages::RaspiMessageEnvelope_Header*>(&::Ar::Raspi::Messages::RaspiMessageEnvelope_Header::default_instance());
  body_ = const_cast< ::Ar::Raspi::Messages::RaspiMessageEnvelope_Body*>(&::Ar::Raspi::Messages::RaspiMessageEnvelope_Body::default_instance());
}

RaspiMessageEnvelope::RaspiMessageEnvelope(const RaspiMessageEnvelope& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.Raspi.Messages.RaspiMessageEnvelope)
}

void RaspiMessageEnvelope::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
}

RaspiMessageEnvelope::~RaspiMessageEnvelope() {
  // @@protoc_insertion_point(destructor:Ar.Raspi.Messages.RaspiMessageEnvelope)
  SharedDtor();
}

void RaspiMessageEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void RaspiMessageEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaspiMessageEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaspiMessageEnvelope_descriptor_;
}

const RaspiMessageEnvelope& RaspiMessageEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

RaspiMessageEnvelope* RaspiMessageEnvelope::default_instance_ = NULL;

RaspiMessageEnvelope* RaspiMessageEnvelope::New(::google::protobuf::Arena* arena) const {
  RaspiMessageEnvelope* n = new RaspiMessageEnvelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaspiMessageEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}

bool RaspiMessageEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Body body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.Raspi.Messages.RaspiMessageEnvelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.Raspi.Messages.RaspiMessageEnvelope)
  return false;
#undef DO_
}

void RaspiMessageEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  // optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Body body = 2;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->body_, output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.Raspi.Messages.RaspiMessageEnvelope)
}

::google::protobuf::uint8* RaspiMessageEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  // optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Body body = 2;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->body_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.Raspi.Messages.RaspiMessageEnvelope)
  return target;
}

int RaspiMessageEnvelope::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  int total_size = 0;

  // optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Body body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaspiMessageEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaspiMessageEnvelope* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaspiMessageEnvelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.Raspi.Messages.RaspiMessageEnvelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.Raspi.Messages.RaspiMessageEnvelope)
    MergeFrom(*source);
  }
}

void RaspiMessageEnvelope::MergeFrom(const RaspiMessageEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::Ar::Raspi::Messages::RaspiMessageEnvelope_Header::MergeFrom(from.header());
  }
  if (from.has_body()) {
    mutable_body()->::Ar::Raspi::Messages::RaspiMessageEnvelope_Body::MergeFrom(from.body());
  }
}

void RaspiMessageEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaspiMessageEnvelope::CopyFrom(const RaspiMessageEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.Raspi.Messages.RaspiMessageEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaspiMessageEnvelope::IsInitialized() const {

  return true;
}

void RaspiMessageEnvelope::Swap(RaspiMessageEnvelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaspiMessageEnvelope::InternalSwap(RaspiMessageEnvelope* other) {
  std::swap(header_, other->header_);
  std::swap(body_, other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaspiMessageEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaspiMessageEnvelope_descriptor_;
  metadata.reflection = RaspiMessageEnvelope_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaspiMessageEnvelope_Header

// optional string interfaceVersion = 1;
void RaspiMessageEnvelope_Header::clear_interfaceversion() {
  interfaceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaspiMessageEnvelope_Header::interfaceversion() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion)
  return interfaceversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Header::set_interfaceversion(const ::std::string& value) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion)
}
 void RaspiMessageEnvelope_Header::set_interfaceversion(const char* value) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion)
}
 void RaspiMessageEnvelope_Header::set_interfaceversion(const char* value, size_t size) {
  
  interfaceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion)
}
 ::std::string* RaspiMessageEnvelope_Header::mutable_interfaceversion() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion)
  return interfaceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaspiMessageEnvelope_Header::release_interfaceversion() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion)
  
  return interfaceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Header::set_allocated_interfaceversion(::std::string* interfaceversion) {
  if (interfaceversion != NULL) {
    
  } else {
    
  }
  interfaceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfaceversion);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.interfaceVersion)
}

// optional int32 id = 2;
void RaspiMessageEnvelope_Header::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 RaspiMessageEnvelope_Header::id() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.id)
  return id_;
}
 void RaspiMessageEnvelope_Header::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.id)
}

// optional string from = 3;
void RaspiMessageEnvelope_Header::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaspiMessageEnvelope_Header::from() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Header::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from)
}
 void RaspiMessageEnvelope_Header::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from)
}
 void RaspiMessageEnvelope_Header::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from)
}
 ::std::string* RaspiMessageEnvelope_Header::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaspiMessageEnvelope_Header::release_from() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Header::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.from)
}

// optional string to = 4;
void RaspiMessageEnvelope_Header::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaspiMessageEnvelope_Header::to() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Header::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to)
}
 void RaspiMessageEnvelope_Header::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to)
}
 void RaspiMessageEnvelope_Header::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to)
}
 ::std::string* RaspiMessageEnvelope_Header::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaspiMessageEnvelope_Header::release_to() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Header::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.to)
}

// optional string timestamp = 5;
void RaspiMessageEnvelope_Header::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaspiMessageEnvelope_Header::timestamp() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Header::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp)
}
 void RaspiMessageEnvelope_Header::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp)
}
 void RaspiMessageEnvelope_Header::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp)
}
 ::std::string* RaspiMessageEnvelope_Header::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaspiMessageEnvelope_Header::release_timestamp() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Header::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.RaspiMessageEnvelope.Header.timestamp)
}

// -------------------------------------------------------------------

// RaspiMessageEnvelope_Body

// optional int32 type = 1;
void RaspiMessageEnvelope_Body::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 RaspiMessageEnvelope_Body::type() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.type)
  return type_;
}
 void RaspiMessageEnvelope_Body::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.type)
}

// optional bytes data = 2;
void RaspiMessageEnvelope_Body::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaspiMessageEnvelope_Body::data() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Body::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.data)
}
 void RaspiMessageEnvelope_Body::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.data)
}
 void RaspiMessageEnvelope_Body::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.data)
}
 ::std::string* RaspiMessageEnvelope_Body::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaspiMessageEnvelope_Body::release_data() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaspiMessageEnvelope_Body::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.RaspiMessageEnvelope.Body.data)
}

// -------------------------------------------------------------------

// RaspiMessageEnvelope

// optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Header header = 1;
bool RaspiMessageEnvelope::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void RaspiMessageEnvelope::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::Ar::Raspi::Messages::RaspiMessageEnvelope_Header& RaspiMessageEnvelope::header() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::Ar::Raspi::Messages::RaspiMessageEnvelope_Header* RaspiMessageEnvelope::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Ar::Raspi::Messages::RaspiMessageEnvelope_Header;
  }
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.RaspiMessageEnvelope.header)
  return header_;
}
::Ar::Raspi::Messages::RaspiMessageEnvelope_Header* RaspiMessageEnvelope::release_header() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.RaspiMessageEnvelope.header)
  
  ::Ar::Raspi::Messages::RaspiMessageEnvelope_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RaspiMessageEnvelope::set_allocated_header(::Ar::Raspi::Messages::RaspiMessageEnvelope_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.RaspiMessageEnvelope.header)
}

// optional .Ar.Raspi.Messages.RaspiMessageEnvelope.Body body = 2;
bool RaspiMessageEnvelope::has_body() const {
  return !_is_default_instance_ && body_ != NULL;
}
void RaspiMessageEnvelope::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}
const ::Ar::Raspi::Messages::RaspiMessageEnvelope_Body& RaspiMessageEnvelope::body() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.RaspiMessageEnvelope.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
::Ar::Raspi::Messages::RaspiMessageEnvelope_Body* RaspiMessageEnvelope::mutable_body() {
  
  if (body_ == NULL) {
    body_ = new ::Ar::Raspi::Messages::RaspiMessageEnvelope_Body;
  }
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.RaspiMessageEnvelope.body)
  return body_;
}
::Ar::Raspi::Messages::RaspiMessageEnvelope_Body* RaspiMessageEnvelope::release_body() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.RaspiMessageEnvelope.body)
  
  ::Ar::Raspi::Messages::RaspiMessageEnvelope_Body* temp = body_;
  body_ = NULL;
  return temp;
}
void RaspiMessageEnvelope::set_allocated_body(::Ar::Raspi::Messages::RaspiMessageEnvelope_Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.RaspiMessageEnvelope.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewNodeMessage::kNameFieldNumber;
const int NewNodeMessage::kIpFieldNumber;
const int NewNodeMessage::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewNodeMessage::NewNodeMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.Raspi.Messages.NewNodeMessage)
}

void NewNodeMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewNodeMessage::NewNodeMessage(const NewNodeMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.Raspi.Messages.NewNodeMessage)
}

void NewNodeMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

NewNodeMessage::~NewNodeMessage() {
  // @@protoc_insertion_point(destructor:Ar.Raspi.Messages.NewNodeMessage)
  SharedDtor();
}

void NewNodeMessage::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NewNodeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewNodeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewNodeMessage_descriptor_;
}

const NewNodeMessage& NewNodeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

NewNodeMessage* NewNodeMessage::default_instance_ = NULL;

NewNodeMessage* NewNodeMessage::New(::google::protobuf::Arena* arena) const {
  NewNodeMessage* n = new NewNodeMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewNodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.Raspi.Messages.NewNodeMessage)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool NewNodeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.Raspi.Messages.NewNodeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.NewNodeMessage.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.NewNodeMessage.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.Raspi.Messages.NewNodeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.Raspi.Messages.NewNodeMessage)
  return false;
#undef DO_
}

void NewNodeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.Raspi.Messages.NewNodeMessage)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.NewNodeMessage.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.NewNodeMessage.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.Raspi.Messages.NewNodeMessage)
}

::google::protobuf::uint8* NewNodeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.Raspi.Messages.NewNodeMessage)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.NewNodeMessage.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.NewNodeMessage.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.Raspi.Messages.NewNodeMessage)
  return target;
}

int NewNodeMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.Raspi.Messages.NewNodeMessage)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewNodeMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.Raspi.Messages.NewNodeMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NewNodeMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewNodeMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.Raspi.Messages.NewNodeMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.Raspi.Messages.NewNodeMessage)
    MergeFrom(*source);
  }
}

void NewNodeMessage::MergeFrom(const NewNodeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.Raspi.Messages.NewNodeMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void NewNodeMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.Raspi.Messages.NewNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewNodeMessage::CopyFrom(const NewNodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.Raspi.Messages.NewNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewNodeMessage::IsInitialized() const {

  return true;
}

void NewNodeMessage::Swap(NewNodeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewNodeMessage::InternalSwap(NewNodeMessage* other) {
  name_.Swap(&other->name_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewNodeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewNodeMessage_descriptor_;
  metadata.reflection = NewNodeMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewNodeMessage

// optional string name = 1;
void NewNodeMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NewNodeMessage::name() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NewNodeMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewNodeMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NewNodeMessage.name)
}
 void NewNodeMessage::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.NewNodeMessage.name)
}
 void NewNodeMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.NewNodeMessage.name)
}
 ::std::string* NewNodeMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.NewNodeMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewNodeMessage::release_name() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.NewNodeMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewNodeMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.NewNodeMessage.name)
}

// optional string ip = 2;
void NewNodeMessage::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NewNodeMessage::ip() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NewNodeMessage.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewNodeMessage::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NewNodeMessage.ip)
}
 void NewNodeMessage::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.NewNodeMessage.ip)
}
 void NewNodeMessage::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.NewNodeMessage.ip)
}
 ::std::string* NewNodeMessage::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.NewNodeMessage.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewNodeMessage::release_ip() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.NewNodeMessage.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewNodeMessage::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.NewNodeMessage.ip)
}

// optional int32 port = 3;
void NewNodeMessage::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 NewNodeMessage::port() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NewNodeMessage.port)
  return port_;
}
 void NewNodeMessage::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NewNodeMessage.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AliveMessage::kNameFieldNumber;
const int AliveMessage::kTimestampFieldNumber;
const int AliveMessage::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AliveMessage::AliveMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.Raspi.Messages.AliveMessage)
}

void AliveMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AliveMessage::AliveMessage(const AliveMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.Raspi.Messages.AliveMessage)
}

void AliveMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AliveMessage::~AliveMessage() {
  // @@protoc_insertion_point(destructor:Ar.Raspi.Messages.AliveMessage)
  SharedDtor();
}

void AliveMessage::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AliveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AliveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AliveMessage_descriptor_;
}

const AliveMessage& AliveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

AliveMessage* AliveMessage::default_instance_ = NULL;

AliveMessage* AliveMessage::New(::google::protobuf::Arena* arena) const {
  AliveMessage* n = new AliveMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AliveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.Raspi.Messages.AliveMessage)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AliveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.Raspi.Messages.AliveMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.AliveMessage.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.AliveMessage.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional string status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.AliveMessage.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.Raspi.Messages.AliveMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.Raspi.Messages.AliveMessage)
  return false;
#undef DO_
}

void AliveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.Raspi.Messages.AliveMessage)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.AliveMessage.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string timestamp = 2;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.AliveMessage.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.AliveMessage.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.Raspi.Messages.AliveMessage)
}

::google::protobuf::uint8* AliveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.Raspi.Messages.AliveMessage)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.AliveMessage.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string timestamp = 2;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.AliveMessage.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.AliveMessage.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.Raspi.Messages.AliveMessage)
  return target;
}

int AliveMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.Raspi.Messages.AliveMessage)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string timestamp = 2;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AliveMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.Raspi.Messages.AliveMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AliveMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AliveMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.Raspi.Messages.AliveMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.Raspi.Messages.AliveMessage)
    MergeFrom(*source);
  }
}

void AliveMessage::MergeFrom(const AliveMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.Raspi.Messages.AliveMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void AliveMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.Raspi.Messages.AliveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliveMessage::CopyFrom(const AliveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.Raspi.Messages.AliveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliveMessage::IsInitialized() const {

  return true;
}

void AliveMessage::Swap(AliveMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AliveMessage::InternalSwap(AliveMessage* other) {
  name_.Swap(&other->name_);
  timestamp_.Swap(&other->timestamp_);
  status_.Swap(&other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AliveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AliveMessage_descriptor_;
  metadata.reflection = AliveMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AliveMessage

// optional string name = 1;
void AliveMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AliveMessage::name() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.AliveMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.AliveMessage.name)
}
 void AliveMessage::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.AliveMessage.name)
}
 void AliveMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.AliveMessage.name)
}
 ::std::string* AliveMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.AliveMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AliveMessage::release_name() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.AliveMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.AliveMessage.name)
}

// optional string timestamp = 2;
void AliveMessage::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AliveMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.AliveMessage.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.AliveMessage.timestamp)
}
 void AliveMessage::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.AliveMessage.timestamp)
}
 void AliveMessage::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.AliveMessage.timestamp)
}
 ::std::string* AliveMessage::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.AliveMessage.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AliveMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.AliveMessage.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.AliveMessage.timestamp)
}

// optional string status = 3;
void AliveMessage::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AliveMessage::status() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.AliveMessage.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.AliveMessage.status)
}
 void AliveMessage::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.AliveMessage.status)
}
 void AliveMessage::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.AliveMessage.status)
}
 ::std::string* AliveMessage::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.AliveMessage.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AliveMessage::release_status() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.AliveMessage.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AliveMessage::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.AliveMessage.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeStatus::kStatusFieldNumber;
const int NodeStatus::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeStatus::NodeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.Raspi.Messages.NodeStatus)
}

void NodeStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeStatus::NodeStatus(const NodeStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.Raspi.Messages.NodeStatus)
}

void NodeStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NodeStatus::~NodeStatus() {
  // @@protoc_insertion_point(destructor:Ar.Raspi.Messages.NodeStatus)
  SharedDtor();
}

void NodeStatus::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NodeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStatus_descriptor_;
}

const NodeStatus& NodeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

NodeStatus* NodeStatus::default_instance_ = NULL;

NodeStatus* NodeStatus::New(::google::protobuf::Arena* arena) const {
  NodeStatus* n = new NodeStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.Raspi.Messages.NodeStatus)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NodeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.Raspi.Messages.NodeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.NodeStatus.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.NodeStatus.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.Raspi.Messages.NodeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.Raspi.Messages.NodeStatus)
  return false;
#undef DO_
}

void NodeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.Raspi.Messages.NodeStatus)
  // optional string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.NodeStatus.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.NodeStatus.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.Raspi.Messages.NodeStatus)
}

::google::protobuf::uint8* NodeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.Raspi.Messages.NodeStatus)
  // optional string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.NodeStatus.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.NodeStatus.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.Raspi.Messages.NodeStatus)
  return target;
}

int NodeStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.Raspi.Messages.NodeStatus)
  int total_size = 0;

  // optional string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.Raspi.Messages.NodeStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.Raspi.Messages.NodeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.Raspi.Messages.NodeStatus)
    MergeFrom(*source);
  }
}

void NodeStatus::MergeFrom(const NodeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.Raspi.Messages.NodeStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void NodeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.Raspi.Messages.NodeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStatus::CopyFrom(const NodeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.Raspi.Messages.NodeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatus::IsInitialized() const {

  return true;
}

void NodeStatus::Swap(NodeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeStatus::InternalSwap(NodeStatus* other) {
  status_.Swap(&other->status_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStatus_descriptor_;
  metadata.reflection = NodeStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeStatus

// optional string status = 1;
void NodeStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NodeStatus::status() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NodeStatus.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeStatus::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NodeStatus.status)
}
 void NodeStatus::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.NodeStatus.status)
}
 void NodeStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.NodeStatus.status)
}
 ::std::string* NodeStatus::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.NodeStatus.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeStatus::release_status() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.NodeStatus.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeStatus::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.NodeStatus.status)
}

// optional string description = 2;
void NodeStatus::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NodeStatus::description() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.NodeStatus.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeStatus::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.NodeStatus.description)
}
 void NodeStatus::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.NodeStatus.description)
}
 void NodeStatus::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.NodeStatus.description)
}
 ::std::string* NodeStatus::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.NodeStatus.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeStatus::release_description() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.NodeStatus.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeStatus::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.NodeStatus.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reset::kByWhoFieldNumber;
const int Reset::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reset::Reset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ar.Raspi.Messages.Reset)
}

void Reset::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Reset::Reset(const Reset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ar.Raspi.Messages.Reset)
}

void Reset::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bywho_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Reset::~Reset() {
  // @@protoc_insertion_point(destructor:Ar.Raspi.Messages.Reset)
  SharedDtor();
}

void Reset::SharedDtor() {
  bywho_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reset_descriptor_;
}

const Reset& Reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RaspiMessages_2eproto();
  return *default_instance_;
}

Reset* Reset::default_instance_ = NULL;

Reset* Reset::New(::google::protobuf::Arena* arena) const {
  Reset* n = new Reset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reset::Clear() {
// @@protoc_insertion_point(message_clear_start:Ar.Raspi.Messages.Reset)
  bywho_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ar.Raspi.Messages.Reset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string byWho = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bywho()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bywho().data(), this->bywho().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.Reset.byWho"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Ar.Raspi.Messages.Reset.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ar.Raspi.Messages.Reset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ar.Raspi.Messages.Reset)
  return false;
#undef DO_
}

void Reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ar.Raspi.Messages.Reset)
  // optional string byWho = 1;
  if (this->bywho().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bywho().data(), this->bywho().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.Reset.byWho");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bywho(), output);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.Reset.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ar.Raspi.Messages.Reset)
}

::google::protobuf::uint8* Reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ar.Raspi.Messages.Reset)
  // optional string byWho = 1;
  if (this->bywho().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bywho().data(), this->bywho().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.Reset.byWho");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bywho(), target);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Ar.Raspi.Messages.Reset.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ar.Raspi.Messages.Reset)
  return target;
}

int Reset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ar.Raspi.Messages.Reset)
  int total_size = 0;

  // optional string byWho = 1;
  if (this->bywho().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bywho());
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ar.Raspi.Messages.Reset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Reset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Reset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ar.Raspi.Messages.Reset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ar.Raspi.Messages.Reset)
    MergeFrom(*source);
  }
}

void Reset::MergeFrom(const Reset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ar.Raspi.Messages.Reset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.bywho().size() > 0) {

    bywho_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bywho_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void Reset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ar.Raspi.Messages.Reset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reset::CopyFrom(const Reset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ar.Raspi.Messages.Reset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reset::IsInitialized() const {

  return true;
}

void Reset::Swap(Reset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reset::InternalSwap(Reset* other) {
  bywho_.Swap(&other->bywho_);
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reset_descriptor_;
  metadata.reflection = Reset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reset

// optional string byWho = 1;
void Reset::clear_bywho() {
  bywho_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Reset::bywho() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.Reset.byWho)
  return bywho_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reset::set_bywho(const ::std::string& value) {
  
  bywho_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.Reset.byWho)
}
 void Reset::set_bywho(const char* value) {
  
  bywho_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.Reset.byWho)
}
 void Reset::set_bywho(const char* value, size_t size) {
  
  bywho_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.Reset.byWho)
}
 ::std::string* Reset::mutable_bywho() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.Reset.byWho)
  return bywho_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Reset::release_bywho() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.Reset.byWho)
  
  return bywho_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reset::set_allocated_bywho(::std::string* bywho) {
  if (bywho != NULL) {
    
  } else {
    
  }
  bywho_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bywho);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.Reset.byWho)
}

// optional string reason = 2;
void Reset::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Reset::reason() const {
  // @@protoc_insertion_point(field_get:Ar.Raspi.Messages.Reset.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reset::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ar.Raspi.Messages.Reset.reason)
}
 void Reset::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ar.Raspi.Messages.Reset.reason)
}
 void Reset::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ar.Raspi.Messages.Reset.reason)
}
 ::std::string* Reset::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:Ar.Raspi.Messages.Reset.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Reset::release_reason() {
  // @@protoc_insertion_point(field_release:Ar.Raspi.Messages.Reset.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reset::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:Ar.Raspi.Messages.Reset.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace Raspi
}  // namespace Ar

// @@protoc_insertion_point(global_scope)
